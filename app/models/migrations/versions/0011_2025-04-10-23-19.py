"""empty message

Revision ID: 0011
Revises: 0010
Create Date: 2025-04-10 23:19:49.891350

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '0011'
down_revision = '0010'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('crypto_events',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('account_id', sa.Integer(), nullable=True),
    sa.Column('value_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('amount', sa.Float(), nullable=True),
    sa.Column('fee', sa.Float(), nullable=True),
    sa.Column('event_type', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )

    # 3. Backfill 'crypto_events' from 'exchange_orders'.
    connection = op.get_bind()
    orders = connection.execute(sa.text("SELECT id, account_id, value_date, amount, fee FROM exchange_orders"))
    for order in orders:
        connection.execute(
            sa.text("""
                INSERT INTO crypto_events (id, account_id, value_date, amount, fee, event_type)
                VALUES (:id, :account_id, :value_date, :amount, :fee, 'exchange_order')
            """),
            {
                "id": order.id,
                "account_id": order.account_id,
                "value_date": order.value_date,
                "amount": order.amount,
                "fee": order.fee
            }
        )

    # 4. Backfill 'crypto_events' from 'exchange_transactions'.
    transactions = connection.execute(
        sa.text("SELECT id, account_id, value_date, amount, fee FROM exchange_transactions"))
    for txn in transactions:
        connection.execute(
            sa.text("""
                INSERT INTO crypto_events (id, account_id, value_date, amount, fee, event_type)
                VALUES (:id, :account_id, :value_date, :amount, :fee, 'exchange_transaction')
            """),
            {
                "id": txn.id,
                "account_id": txn.account_id,
                "value_date": txn.value_date,
                "amount": txn.amount,
                "fee": txn.fee
            }
        )

    op.add_column('crypto_events', sa.Column('external_id', sa.String(length=70), nullable=True))
    op.create_unique_constraint('_crypto_event_account_id_external_id', 'crypto_events', ['account_id', 'external_id'])
    op.add_column('crypto_events', sa.Column('symbol', sa.String(length=150), nullable=True))
    op.add_column('crypto_events', sa.Column('type', sa.Integer(), nullable=True))
    op.add_column('crypto_events', sa.Column('tx_address', sa.String(length=200), nullable=True))
    op.add_column('crypto_events', sa.Column('rx_address', sa.String(length=200), nullable=True))
    op.add_column('crypto_events', sa.Column('price', sa.Float(), nullable=True))
    op.add_column('crypto_events', sa.Column('status', sa.String(length=150), nullable=True))
    op.drop_constraint('exchange_closed_orders_sell_order_id_fkey', 'exchange_closed_orders', type_='foreignkey')
    op.create_foreign_key(None, 'exchange_closed_orders', 'crypto_events', ['sell_order_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint('exchange_open_orders_order_id_fkey', 'exchange_open_orders', type_='foreignkey')
    op.create_foreign_key(None, 'exchange_open_orders', 'crypto_events', ['order_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint('exchange_proxy_orders_order_id_fkey', 'exchange_proxy_orders', type_='foreignkey')
    op.create_foreign_key(None, 'exchange_proxy_orders', 'crypto_events', ['order_id'], ['id'], ondelete='CASCADE')

    op.add_column('exchange_open_orders', sa.Column('user_price', sa.Float(), nullable=True))
    op.add_column('exchange_proxy_orders', sa.Column('user_price', sa.Float(), nullable=True))
    op.add_column('exchange_closed_orders', sa.Column('user_price', sa.Float(), nullable=True))

    #op.create_foreign_key(None, 'exchange_orders', 'crypto_events', ['id'], ['id'])
    #op.create_foreign_key(None, 'exchange_transactions', 'crypto_events', ['id'], ['id'])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    op.drop_column('exchange_closed_orders', 'user_price')
    op.drop_column('exchange_proxy_orders', 'user_price')
    op.drop_column('exchange_open_orders', 'user_price')

    op.drop_constraint(None, 'exchange_proxy_orders', type_='foreignkey')
    op.create_foreign_key('exchange_proxy_orders_order_id_fkey', 'exchange_proxy_orders', 'exchange_orders', ['order_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint(None, 'exchange_open_orders', type_='foreignkey')
    op.create_foreign_key('exchange_open_orders_order_id_fkey', 'exchange_open_orders', 'exchange_orders', ['order_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint(None, 'exchange_closed_orders', type_='foreignkey')
    op.create_foreign_key('exchange_closed_orders_sell_order_id_fkey', 'exchange_closed_orders', 'exchange_orders', ['sell_order_id'], ['id'], ondelete='CASCADE')
    op.drop_column('crypto_events', 'status')
    op.drop_column('crypto_events', 'price')
    op.drop_column('crypto_events', 'rx_address')
    op.drop_column('crypto_events', 'tx_address')
    op.drop_column('crypto_events', 'type')
    op.drop_column('crypto_events', 'symbol')
    op.drop_constraint('_crypto_event_account_id_external_id', 'crypto_events', type_='unique')
    op.drop_column('crypto_events', 'external_id')

    #op.drop_constraint(None, 'exchange_transactions', type_='foreignkey')
    #op.drop_constraint(None, 'exchange_orders', type_='foreignkey')
    op.drop_table('crypto_events')
    # ### end Alembic commands ###
